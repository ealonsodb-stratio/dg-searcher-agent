package com.stratio.governance.agent.search.testit

import com.stratio.governance.agent.search.testit.utils.postgres.PostgresSpace.Database
import com.stratio.governance.agent.search.testit.utils.postgres.PostgresSpace.Database.Schema
import com.stratio.governance.agent.search.testit.utils.postgres.PostgresSpace.Database.Schema.Table
import com.stratio.governance.agent.search.testit.utils.postgres.PostgresSpace.Database.Schema.Table.{Column, Constraint, Insert}
import com.stratio.governance.agent.search.testit.utils.postgres.PostgresSpace.Database.Schema.Table.Column.{Constraint => ColumnConstraint}
import com.stratio.governance.agent.search.testit.utils.postgres.PostgresSpace.Database.Schema.Table.Constraint.{ForeignKeyType, OnDeleteCascadeAdditionalOption, UniqueType}
import com.stratio.governance.agent.search.testit.utils.postgres.PostgresSpace.Database.Schema.Table.Insert.Value
import com.stratio.governance.agent.search.testit.utils.postgres.utils.Utils
import com.stratio.governance.agent.searcher.actors.dao.postgres.PostgresSourceDao
import com.stratio.governance.agent.searcher.main.AppConf
import com.stratio.governance.agent.searcher.model.utils.ExponentialBackOff
import org.scalatest.{BeforeAndAfterAll, FlatSpec}

class PostgresSourceDaoITTest extends FlatSpec with BeforeAndAfterAll {
  var utils: Utils = Utils.NONE
  private val database: String = AppConf.sourceDatabase
  val schema: String = "postgres_source_dao_it_test_schema"

  override def beforeAll(): Unit = {

    utils = Utils.builder(
      Database.builder(database).withSchema(
        Schema.builder(schema).withTable(
          Table.builder(schema, "data_asset")
            .withColumn(Column.builder("id", Column.Type.SERIAL).withConstraint(ColumnConstraint.`PRIMARY KEY`))
            .withColumn(Column.builder("name", Column.Type.TEXT))
            .withColumn(Column.builder("description", Column.Type.TEXT))
            .withColumn(Column.builder("metadata_path", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`).withConstraint(ColumnConstraint.UNIQUE))
            .withColumn(Column.builder("type", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
            .withColumn(Column.builder("subtype", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
            .withColumn(Column.builder("tenant", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
            .withColumn(Column.builder("properties", Column.Type.JSONB).withConstraint(ColumnConstraint.`NOT NULL`))
            .withColumn(Column.builder("active", Column.Type.BOOLEAN).withConstraint(ColumnConstraint.`NOT NULL`))
            .withColumn(Column.builder("discovered_at", Column.Type.TIMESTAMP).withConstraint(ColumnConstraint.`NOT NULL`))
            .withColumn(Column.builder("modified_at", Column.Type.TIMESTAMP).withConstraint(ColumnConstraint.`NOT NULL`))
            .withConstraint(Constraint.builder("u_data_asset_meta_data_path_tenant", UniqueType.builder(Set("metadata_path", "tenant"))))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder("id"), "192"), Value.builder(Column.builder("name"), "'R_REGIONKEY'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/finance/2018>/:region.parquet:R_REGIONKEY:'"), Value.builder(Column.builder("type" ), "'HDFS'"), Value.builder(Column.builder("subtype" ), "'FIELD'"), Value.builder(Column.builder("tenant" ), "'NONE'"), Value.builder(Column.builder("properties" ), "'{\"type\": \"long\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active" ), "true"), Value.builder(Column.builder("discovered_at" ), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at" ), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "193"), Value.builder(Column.builder("name"), "'region.parquet'"), Value.builder(Column.builder("description"), "'Hdfs file'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/marketing/2017>/:region.parquet:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'RESOURCE'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"group\": \"supergroup\", \"owner\": \"hdfs\", \"length\": 455, \"schema\": \"na\", \"blockSize\": 134217728, \"modifiedAt\": 1544433863730, \"isEncrypted\": \"false\", \"permissions\": \"644\", \"replication\": 3}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "194"), Value.builder(Column.builder("name"), "'finance'"), Value.builder(Column.builder("description"), "'finance Hdfs directory'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department>/finance:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'PATH'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"group\": \"supergroup\", \"owner\": \"hdfs\", \"isEncrypted\": \"false\", \"permissions\": \"755\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "195"), Value.builder(Column.builder("name"), "'R_REGIONKEY'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/finance/2017>/:region.parquet:R_REGIONKEY:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'FIELD'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"type\": \"long\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "196"), Value.builder(Column.builder("name"), "'R_COMMENT'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/marketing/2018>/:region.parquet:R_COMMENT:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'FIELD'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"type\": \"org.apache.parquet.io.api.Binary\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "197"), Value.builder(Column.builder("name"), "'hdfsFinance'"), Value.builder(Column.builder("description"), "'Hdfs datastore'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'DS'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"url\": \"url\", \"version\": \"1.0.0\", \"security\": \"TLS\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "198"), Value.builder(Column.builder("name"), "'department'"), Value.builder(Column.builder("description"), "'Hdfs directory'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance:/>/department:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'PATH'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"group\": \"supergroup\", \"owner\": \"hdfs\", \"isEncrypted\": \"false\", \"permissions\": \"755\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "199"), Value.builder(Column.builder("name"), "'2018'"), Value.builder(Column.builder("description"), "'Hdfs directory'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/finance>/2018:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'PATH'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"group\": \"supergroup\", \"owner\": \"hdfs\", \"isEncrypted\": \"false\", \"permissions\": \"755\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "200"), Value.builder(Column.builder("name"), "'2017'"), Value.builder(Column.builder("description"), "'Hdfs directory'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/finance>/2017:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'PATH'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"group\": \"supergroup\", \"owner\": \"hdfs\", \"isEncrypted\": \"false\", \"permissions\": \"755\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "201"), Value.builder(Column.builder("name"), "'R_REGIONKEY'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/marketing/2018>/:region.parquet:R_REGIONKEY:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'FIELD'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"type\": \"long\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "202"), Value.builder(Column.builder("name"), "'R_REGIONKEY'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/marketing/2017>/:region.parquet:R_REGIONKEY:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'FIELD'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"type\": \"long\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "203"), Value.builder(Column.builder("name"), "'R_COMMENT'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/finance/2018>/:region.parquet:R_COMMENT:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'FIELD'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"type\": \"org.apache.parquet.io.api.Binary\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "204"), Value.builder(Column.builder("name"), "'marketing'"), Value.builder(Column.builder("description"), "'Hdfs directory'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department>/marketing:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'PATH'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"group\": \"supergroup\", \"owner\": \"hdfs\", \"isEncrypted\": \"false\", \"permissions\": \"755\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "205"), Value.builder(Column.builder("name"), "'R_COMMENT'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/marketing/2017>/:region.parquet:R_COMMENT:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'FIELD'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"type\": \"org.apache.parquet.io.api.Binary\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "206"), Value.builder(Column.builder("name"), "'region.parquet'"), Value.builder(Column.builder("description"), "'Hdfs file'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/marketing/2018>/:region.parquet:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'RESOURCE'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"group\": \"supergroup\", \"owner\": \"hdfs\", \"length\": 455, \"schema\": \"na\", \"blockSize\": 134217728, \"modifiedAt\": 1544433868101, \"isEncrypted\": \"false\", \"permissions\": \"644\", \"replication\": 3}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "207"), Value.builder(Column.builder("name"), "'R_NAME'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/marketing/2017>/:region.parquet:R_NAME:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'FIELD'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"type\": \"org.apache.parquet.io.api.Binary\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "208"), Value.builder(Column.builder("name"), "'R_NAME'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/finance/2018>/:region.parquet:R_NAME:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'FIELD'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"type\": \"org.apache.parquet.io.api.Binary\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "209"), Value.builder(Column.builder("name"), "'R_NAME'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/finance/2017>/:region.parquet:R_NAME:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'FIELD'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"type\": \"org.apache.parquet.io.api.Binary\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "210"), Value.builder(Column.builder("name"), "'R_NAME'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/marketing/2018>/:region.parquet:R_NAME:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'FIELD'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"type\": \"org.apache.parquet.io.api.Binary\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "211"), Value.builder(Column.builder("name"), "'region.parquet'"), Value.builder(Column.builder("description"), "'Hdfs file'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/finance/2017>/:region.parquet:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'RESOURCE'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"group\": \"supergroup\", \"owner\": \"hdfs\", \"length\": 455, \"schema\": \"na\", \"blockSize\": 134217728, \"modifiedAt\": 1544433853808, \"isEncrypted\": \"false\", \"permissions\": \"644\", \"replication\": 3}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "212"), Value.builder(Column.builder("name"), "'2018'"), Value.builder(Column.builder("description"), "' Hdfs directory'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/marketing>/2018:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'PATH'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"group\": \"supergroup\", \"owner\": \"hdfs\", \"isEncrypted\": \"false\", \"permissions\": \"755\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "213"), Value.builder(Column.builder("name"), "'region.parquet'"), Value.builder(Column.builder("description"), "'Hdfs file'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/finance/2018>/:region.parquet:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'RESOURCE'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"group\": \"supergroup\", \"owner\": \"hdfs\", \"length\": 455, \"schema\": \"na\", \"blockSize\": 134217728, \"modifiedAt\": 1544433849615, \"isEncrypted\": \"false\", \"permissions\": \"644\", \"replication\": 3}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "214"), Value.builder(Column.builder("name"), "'2017'"), Value.builder(Column.builder("description"), "'Hdfs directory'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/marketing>/2017:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'PATH'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"group\": \"supergroup\", \"owner\": \"hdfs\", \"isEncrypted\": \"false\", \"permissions\": \"755\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
            .withInsert(Insert.builder(schema, "data_asset").withValues(Value.builder(Column.builder( "id"), "215"), Value.builder(Column.builder("name"), "'R_COMMENT'"), Value.builder(Column.builder("description"), "'Hdfs parquet column'"), Value.builder(Column.builder("metadata_path"), "'hdfsFinance://department/finance/2017>/:region.parquet:R_COMMENT:'"), Value.builder(Column.builder("type"), "'HDFS'"), Value.builder(Column.builder("subtype"), "'FIELD'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("properties"), "'{\"type\": \"org.apache.parquet.io.api.Binary\", \"default\": \"\", \"constraint\": \"\", \"schemaType\": \"parquet\"}'"), Value.builder(Column.builder("active"), "true"), Value.builder(Column.builder("discovered_at"), "'2018-12-10T08:27:17Z'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
      ).withTable(
        Table.builder(schema, "partial_indexation_state")
          .withColumn(Column.builder("id", Column.Type.SMALLINT).withConstraint(ColumnConstraint.`NOT NULL`).withConstraint(ColumnConstraint.UNIQUE).withConstraint(ColumnConstraint.`PRIMARY KEY`))
          .withColumn(Column.builder("last_read_data_asset", Column.Type.TIMESTAMP))
          .withColumn(Column.builder("last_read_key_data_asset", Column.Type.TIMESTAMP))
          .withColumn(Column.builder("last_read_key", Column.Type.TIMESTAMP))
          .withColumn(Column.builder("last_read_business_assets_data_asset", Column.Type.TIMESTAMP))
          .withColumn(Column.builder("last_read_business_assets", Column.Type.TIMESTAMP))
      ).withTable(
        Table.builder(schema, "total_indexation_state")
          .withColumn(Column.builder("id", Column.Type.SMALLINT).withConstraint(ColumnConstraint.`NOT NULL`).withConstraint(ColumnConstraint.UNIQUE).withConstraint(ColumnConstraint.`PRIMARY KEY`))
          .withColumn(Column.builder("last_read_data_asset", Column.Type.TIMESTAMP))
      ).withTable(
        Table.builder(schema, "key")
          .withColumn(Column.builder("id", Column.Type.SERIAL).withConstraint(ColumnConstraint.`PRIMARY KEY`).withConstraint(ColumnConstraint.UNIQUE))
          .withColumn(Column.builder("key", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("description", Column.Type.TEXT))
          .withColumn(Column.builder("status", Column.Type.BOOLEAN).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("tenant", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("modified_at", Column.Type.TIMESTAMP).withConstraint(ColumnConstraint.`NOT NULL`))
          .withConstraint(Constraint.builder("u_key_key_tenant", UniqueType.builder(Set("key", "tenant"))))
          .withInsert(Insert.builder(schema, "key").withValues(Value.builder(Column.builder( "id" ), "1"), Value.builder(Column.builder("key" ), "'OWNER'"), Value.builder(Column.builder("description"), "'Owner'"), Value.builder(Column.builder("status" ), "true"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
          .withInsert(Insert.builder(schema, "key").withValues(Value.builder(Column.builder( "id" ), "2"), Value.builder(Column.builder("key" ), "'QUALITY'"), Value.builder(Column.builder("description"), "'Quality'"), Value.builder(Column.builder("status" ), "true"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
      ).withTable(
        Table.builder(schema, "key_data_asset")
          .withColumn(Column.builder("id", Column.Type.SERIAL).withConstraint(ColumnConstraint.`PRIMARY KEY`))
          .withColumn(Column.builder("value", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("key_id", Column.Type.INTEGER).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("data_asset_id", Column.Type.INTEGER).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("tenant", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("modified_at", Column.Type.TIMESTAMP).withConstraint(ColumnConstraint.`NOT NULL`))
          .withConstraint(Constraint.builder("fk_key_value_key", ForeignKeyType.builder("key_id", schema, "key", Set("id")).withAdditionalOption(OnDeleteCascadeAdditionalOption.builder).build))
          .withConstraint(Constraint.builder("fk_key_value_data_asset", ForeignKeyType.builder("data_asset_id", schema,"data_asset", Set("id")).withAdditionalOption(OnDeleteCascadeAdditionalOption.builder).build))
          .withInsert(Insert.builder(schema, "key_data_asset").withValues(Value.builder(Column.builder( "id" ), "2"), Value.builder(Column.builder("value"), "'finance'"), Value.builder(Column.builder("key_id" ), "1"), Value.builder(Column.builder("data_asset_id" ), "201"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
      )
      .withTable(
        Table.builder(schema, "community")
          .withColumn(Column.builder("id", Column.Type.SERIAL).withConstraint(ColumnConstraint.`PRIMARY KEY`))
          .withColumn(Column.builder("name", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("description", Column.Type.TEXT))
          .withColumn(Column.builder("tenant", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withConstraint(Constraint.builder("u_community_name_tenant", UniqueType.builder(Set("name","tenant"))))
          .withInsert(Insert.builder(schema, "community").withValues(Value.builder(Column.builder( "id" ), "1")).withValues(Value.builder(Column.builder("name"), "'Marketing'"), Value.builder(Column.builder("description"), "'Description marketing'"), Value.builder(Column.builder("tenant"), "'NONE'")))
      )
      .withTable(
        Table.builder(schema, "domain")
          .withColumn(Column.builder("id", Column.Type.SERIAL).withConstraint(ColumnConstraint.`PRIMARY KEY`))
          .withColumn(Column.builder("name", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("description", Column.Type.TEXT))
          .withColumn(Column.builder("community_id", Column.Type.INTEGER).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("tenant", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withConstraint(Constraint.builder("u_domain_name_community_id", UniqueType.builder(Set("name","community_id"))))
          .withConstraint(Constraint.builder("fk_domain_community", ForeignKeyType.builder("community_id",schema,"community", Set("id")).withAdditionalOption(OnDeleteCascadeAdditionalOption.builder).build))
          .withInsert(Insert.builder(schema, "domain").withValues(Value.builder(Column.builder( "id" ), "1"), Value.builder(Column.builder("name"), "'Marketing domain'"), Value.builder(Column.builder("description"), "'Description marketing domain'"), Value.builder(Column.builder("community_id" ), "1"), Value.builder(Column.builder("tenant"), "'NONE'")))
      )
      .withTable(
        Table.builder(schema, "business_assets_type")
          .withColumn(Column.builder("id", Column.Type.SERIAL).withConstraint(ColumnConstraint.`PRIMARY KEY`))
          .withColumn(Column.builder("name", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`).withConstraint(ColumnConstraint.UNIQUE))
          .withColumn(Column.builder("description", Column.Type.TEXT))
          .withColumn(Column.builder("properties", Column.Type.JSONB))
          .withInsert(Insert.builder(schema, "business_assets_type").withValues(Value.builder(Column.builder("name" ), "'TERM'"), Value.builder(Column.builder("description"), "'Business term'"), Value.builder(Column.builder("properties"), "'{\"description\":\"string\",\"examples\":\"string\"}'")))
          //.withInsert(Insert.builder(schema, "business_assets_type").withValues(Value.builder(Column.builder("name"), "'QR'"), Value.builder(Column.builder("description"), "'Quality rules'"), Value.builder(Column.builder("properties"), "'{\"volumetria\":\"integer\",\"regex\":\"string\"}'"))
      )
      .withTable(
        Table.builder(schema, "business_assets_status")
          .withColumn(Column.builder("id", Column.Type.SERIAL).withConstraint(ColumnConstraint.`PRIMARY KEY`))
          .withColumn(Column.builder("name", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("description", Column.Type.TEXT))
          .withInsert(Insert.builder(schema, "business_assets_status").withValues(Value.builder(Column.builder("description" ), "'Approved'"), Value.builder(Column.builder("name"), "'APR'")))
          .withInsert(Insert.builder(schema, "business_assets_status").withValues(Value.builder(Column.builder("description" ), "'Pending'"), Value.builder(Column.builder("name"), "'PEN'")))
          .withInsert(Insert.builder(schema, "business_assets_status").withValues(Value.builder(Column.builder("description" ), "'Under review'"), Value.builder(Column.builder("name"), "'UNR'")))
      )
      .withTable(
        Table.builder(schema, "business_assets")
          .withColumn(Column.builder("id", Column.Type.SERIAL).withConstraint(ColumnConstraint.`PRIMARY KEY`))
          .withColumn(Column.builder("name", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("description", Column.Type.TEXT))
          .withColumn(Column.builder("properties", Column.Type.JSONB))
          .withColumn(Column.builder("tenant", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("business_assets_type_id", Column.Type.INTEGER).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("domain_id", Column.Type.INTEGER).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("business_assets_status_id", Column.Type.INTEGER).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("modified_at", Column.Type.TIMESTAMP).withConstraint(ColumnConstraint.`NOT NULL`))
          .withConstraint(Constraint.builder("fk_business_assets_business_assets_type", ForeignKeyType.builder("business_assets_type_id", schema,"business_assets_type", Set("id")).build))
          .withConstraint(Constraint.builder("fk_business_assets_domain", ForeignKeyType.builder("domain_id", schema, "domain", Set("id")).withAdditionalOption(OnDeleteCascadeAdditionalOption.builder).build))
          .withConstraint(Constraint.builder("fk_business_assets_business_assets_status", ForeignKeyType.builder("business_assets_status_id", schema, "business_assets_status", Set("id"))))
          .withConstraint(Constraint.builder("u_business_assets_name_domain_id", UniqueType.builder(Set("name","domain_id"))))
          .withInsert(Insert.builder(schema, "business_assets").withValues(Value.builder(Column.builder( "id" ), "1"), Value.builder(Column.builder("name"), "'Production'"), Value.builder(Column.builder("description"), "'desc bt1'"), Value.builder(Column.builder("properties"), "'{}'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("business_assets_type_id" ), "1"), Value.builder(Column.builder("domain_id" ), "1"), Value.builder(Column.builder("business_assets_status_id" ), "1"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
          .withInsert(Insert.builder(schema, "business_assets").withValues(Value.builder(Column.builder( "id" ), "2"), Value.builder(Column.builder("name"), "'Client'"), Value.builder(Column.builder("description"), "'desc bt1'"), Value.builder(Column.builder("properties"), "'{}'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("business_assets_type_id" ), "1"), Value.builder(Column.builder("domain_id" ), "1"), Value.builder(Column.builder("business_assets_status_id" ), "1"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
          .withInsert(Insert.builder(schema, "business_assets").withValues(Value.builder(Column.builder( "id" ), "3"), Value.builder(Column.builder("name"), "'Department'"), Value.builder(Column.builder("description"), "'desc bt1'"), Value.builder(Column.builder("properties"), "'{}'"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("business_assets_type_id" ), "1"), Value.builder(Column.builder("domain_id" ), "1"), Value.builder(Column.builder("business_assets_status_id" ), "1"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
      )
      .withTable(
        Table.builder(schema, "business_assets_data_asset")
          .withColumn(Column.builder("id", Column.Type.SERIAL).withConstraint(ColumnConstraint.`PRIMARY KEY`))
          .withColumn(Column.builder("name", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("description", Column.Type.TEXT))
          .withColumn(Column.builder("tenant", Column.Type.TEXT).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("data_asset_id", Column.Type.INTEGER).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("business_assets_id", Column.Type.INTEGER).withConstraint(ColumnConstraint.`NOT NULL`))
          .withColumn(Column.builder("modified_at", Column.Type.TIMESTAMP).withConstraint(ColumnConstraint.`NOT NULL`))
          .withConstraint(Constraint.builder("fk_business_assets_business_assets_id_business_assets", ForeignKeyType.builder("business_assets_id", schema, "business_assets", Set("id")).withAdditionalOption(OnDeleteCascadeAdditionalOption.builder).build))
          .withConstraint(Constraint.builder("fk_business_assets_data_asset_id_data_asset", ForeignKeyType.builder("data_asset_id", schema, "data_asset",Set("id")).withAdditionalOption(OnDeleteCascadeAdditionalOption.builder)))
          .withConstraint(Constraint.builder("u_business_assets_data_asset_data_asset_id_business_assets_id", UniqueType.builder(Set("data_asset_id","business_assets_id"))))
          .withInsert(Insert.builder(schema, "business_assets_data_asset").withValues(Value.builder(Column.builder( "id" ), "1"), Value.builder(Column.builder("name"), "''"), Value.builder(Column.builder("description"), "''"), Value.builder(Column.builder("tenant"), "'NONE'"), Value.builder(Column.builder("data_asset_id" ), "201"), Value.builder(Column.builder("business_assets_id" ), "1"), Value.builder(Column.builder("modified_at"), "'2018-12-10T08:27:17Z'")))
      )).build
        .create
    ).build
  }

  override def afterAll(): Unit = {
    utils.database.dropSchemas
  }

  "PostgresDao constructor " should " create all tables if is not " in {

    val exponentialBackOff :ExponentialBackOff = ExponentialBackOff(AppConf.extractorExponentialbackoffPauseMs, AppConf.extractorExponentialbackoffMaxErrorRetry)
    val postgresDao: PostgresSourceDao = new PostgresSourceDao(AppConf.sourceConnectionUrl, AppConf.sourceConnectionUser, AppConf.sourceConnectionPassword, database, schema, 1, 4, exponentialBackOff,true)

    assert(true)
  }

}
